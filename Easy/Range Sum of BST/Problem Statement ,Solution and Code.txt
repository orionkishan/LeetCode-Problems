/*Problem Statement:

Given the root node of a binary search tree, 
return the sum of values of all nodes with a value in the range [low, high].


*/

/*Solution:

We check if the value of node is in between low and high then we add the node value to sum.
then we call the function on left sub tree and then on right sub tree
(more like pre-order traversal of tree)

if node value is less than low then we call the function at right sub tree

if node value is more than high then we call the function at left sub tree



*/

//C++ Code:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
    
public:
    int sum=0;
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root==nullptr)
            return 0;
        else if(root->val>=low && root->val<=high){
            sum+=root->val;
            rangeSumBST(root->left,low,high);
            rangeSumBST(root->right,low,high);
        }
        else if(root->val<low)
            rangeSumBST(root->right,low,high);
        else if(root->val>high)
            rangeSumBST(root->left,low,high);
        
        return sum;
    }
};