/*Problem Statement:

You own a Goal Parser that can interpret a string command. 
The command consists of an alphabet of "G", "()" and/or "(al)" in some order. 
The Goal Parser will interpret "G" as the string "G", "()" as the string "o", and "(al)" as the string "al". 
The interpreted strings are then concatenated in the original order.

Given the string command, return the Goal Parser's interpretation of command.

Input: command = "G()(al)"
Output: "Goal"

Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal".

*/

/*Solution:

We just need to the following operation
G -> G
() -> o
(al) -> al

We create a string out
We can use a for loop to achieve this
If we encounter G we simply add G to our out string

if we encounter () consecutively then we add o and increase the iterator by 1
because we are considering ( and ) i.e. two elements so we need to increase iterator

Now if we encounter (al) we add al to out and increase iterator by 3
because we are considering 4 elements (,a,l and )


Then we return out
*/

//C++ Code:

class Solution {
public:
    string interpret(string command) {
        string out;
        for(int i=0;i<command.size();i++){
            if(command[i]=='G')
                out+='G';
            else if(command[i]=='(' && command[i+1]==')'){
                out+='o';
                i+=1;
            }
            else{
                out+="al";
                i+=3;}
        }
        return out;
    }
};