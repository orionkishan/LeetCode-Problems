/*Problem Statement:
Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
-->arr[0] < arr[1] < ... arr[i-1] < arr[i]
-->arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, 
return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

*/

/*Solution:

The solution looks like binary search algorithm

We break the question it 4 cases:-

--> a=[1,2,1] low=0 high=2 mid= 1
    so a[mid] is greater than a[mid-1] and a[mid+1]
    so our answer is a[mid]

--> a=[1,5,4,3,2] low=0 high=4 mid=2
    so a[mid] is less than a[mid-1] but greater than a[mid+1]
    so we say one peak lies in left of mid
    hence high=mid
 
--> a=[1,3,4,5,2] low=0 high=4 mid=2
    so a[mid] is less than a[mid+1] but greater than a[mid-1]
    so we say one peak lies in right of mid
    hence low=mid

-->And if anything else comes then we make high=mid(or we can also do low=mid) both the things are accepted


	

*/

//C++ Code:

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int high=arr.size()-1;
        int low=0;
        int mid=(low+high)/2;
        while(mid!=0 && mid!=arr.size()-1){
            
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1])
                return mid;
            else if(arr[mid]<arr[mid-1]&&arr[mid]>arr[mid+1])
                high=mid;
            else if(arr[mid]<arr[mid+1]&&arr[mid]>arr[mid-1])
                low=mid;
            else
                high=mid;
            
            mid=(low+high)/2;
        }
        return 0;
    }
};