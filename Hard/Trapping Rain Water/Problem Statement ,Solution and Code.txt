/*Problem Statement:

Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped.

Constraints:

n == height.length
0 <= n <= 3 * 10^4
0 <= height[i] <= 10^5

*/

/*Solution:
 
The idea is to maintain two array left_max and right_max of same size as
given array
which stores the maximum height of the building left to ith building 
and maximum height of building right to th ith building in respective arrays
at ith index  

Then total water stored above ith building will be 

min(left_max[i],right_max[i]) -height[i]

*/

//C++ Code:

class Solution {
public:
    int trap(vector<int>& height) {
        
        vector<int> left_max;
        vector<int> right_max;
        
        if(height.size()<1)
            return 0;
        
        int max=0;
       
        left_max.push_back(0);
        right_max.push_back(0);
        
        for(int i=0;i<height.size()-1;i++){
            if(height[i]>=max)
            {
                left_max.push_back(height[i]);
                max=height[i];
                
            }
            else
                left_max.push_back(max);
        }
        
        max=0;
        
        for(int i=height.size()-1;i>0;i--){
              if(height[i]>=max)  
              {
                  right_max.push_back(height[i]);
                  max=height[i];
              }
              else
                  right_max.push_back(max);
                
            }
        
        reverse(right_max.begin(),right_max.end());
        
        
        int sum=0;
        int temp;
        
        for(int i=0;i<height.size();i++)
        {
            temp=min(left_max[i],right_max[i])-height[i];
            if(temp>0)
                sum+=temp;
            
            
        }
        return sum;
        
    }
};